using System;
using System.Diagnostics;
using System.Net.Http;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Security;
using System.Security.Permissions;
using System.Threading.Tasks;

[assembly: CompilationRelaxations(8)]
[assembly: RuntimeCompatibility(WrapNonExceptionThrows = true)]
[assembly: Debuggable(DebuggableAttribute.DebuggingModes.Default | DebuggableAttribute.DebuggingModes.DisableOptimizations | DebuggableAttribute.DebuggingModes.IgnoreSymbolStoreSequencePoints | DebuggableAttribute.DebuggingModes.EnableEditAndContinue)]
[assembly: SecurityPermission(SecurityAction.RequestMinimum, SkipVerification = true)]
[assembly: AssemblyVersion("0.0.0.0")]
[module: UnverifiableCode]
namespace AsyncAwait2
{
    internal class Program
    {
        [CompilerGenerated]
        private sealed class <Main>d__0 : IAsyncStateMachine
        {
            public int <>1__state;

            public AsyncTaskMethodBuilder <>t__builder;

            public string[] args;

            private HttpClient <client>5__1;

            private byte[] <content>5__2;

            private byte[] <>s__3;

            private TaskAwaiter<byte[]> <>u__1;

            private void MoveNext()
            {
                int num = <>1__state;
                try
                {
                    TaskAwaiter<byte[]> awaiter;
                    if (num != 0)
                    {
                        <client>5__1 = new HttpClient();
                        awaiter = <client>5__1.GetByteArrayAsync(new Uri("http://www.idnes.cz")).GetAwaiter();
                        if (!awaiter.IsCompleted)
                        {
                            num = (<>1__state = 0);
                            <>u__1 = awaiter;
                            <Main>d__0 stateMachine = this;
                            <>t__builder.AwaitUnsafeOnCompleted(ref awaiter, ref stateMachine);
                            return;
                        }
                    }
                    else
                    {
                        awaiter = <>u__1;
                        <>u__1 = default(TaskAwaiter<byte[]>);
                        num = (<>1__state = -1);
                    }
                    <>s__3 = awaiter.GetResult();
                    <content>5__2 = <>s__3;
                    <>s__3 = null;
                    Console.ReadLine();
                }
                catch (Exception exception)
                {
                    <>1__state = -2;
                    <>t__builder.SetException(exception);
                    return;
                }
                <>1__state = -2;
                <>t__builder.SetResult();
            }

            void IAsyncStateMachine.MoveNext()
            {
                //ILSpy generated this explicit interface implementation from .override directive in MoveNext
                this.MoveNext();
            }

            [DebuggerHidden]
            private void SetStateMachine(IAsyncStateMachine stateMachine)
            {
            }

            void IAsyncStateMachine.SetStateMachine(IAsyncStateMachine stateMachine)
            {
                //ILSpy generated this explicit interface implementation from .override directive in SetStateMachine
                this.SetStateMachine(stateMachine);
            }
        }

        [AsyncStateMachine(typeof(<Main>d__0))]
        [DebuggerStepThrough]
        public static Task Main(string[] args)
        {
            <Main>d__0 stateMachine = new <Main>d__0();
            stateMachine.args = args;
            stateMachine.<>t__builder = AsyncTaskMethodBuilder.Create();
            stateMachine.<>1__state = -1;
            AsyncTaskMethodBuilder <>t__builder = stateMachine.<>t__builder;
            <>t__builder.Start(ref stateMachine);
            return stateMachine.<>t__builder.Task;
        }
    }
}
